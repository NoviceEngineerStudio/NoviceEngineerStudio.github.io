---
import { Image } from "astro:assets";
import NavLayout from "../../../../layouts/NavLayout.astro";

import home_icon from "../../../../assets/icons/House.svg";
import wireframe_icon from "../../../../assets/icons/Grid.svg";
import download_icon from "../../../../assets/icons/Download.svg";
---

<NavLayout title="MapMaker" body_class="map-maker-body">
    <!-- * Map Configuration Panel * -->
    <div class="map-maker-config-panel">
        <h1 class="text-lg">Map Maker</h1>

        <!-- * Grid Parameters * -->
        <div>
            <h2 class="text-md">Grid</h2>
            <hr/>
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-grid-width">Grid Width</label>
            <input type="number" id="map-maker-grid-width" class="text-xs map-maker-number-input" step="1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-grid-height">Grid Height</label>
            <input type="number" id="map-maker-grid-height" class="text-xs map-maker-number-input" step="1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-point-spacing">Point Spacing (m)</label>
            <input type="number" id="map-maker-point-spacing" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <!-- * Height Parameters * -->
        <div>
            <h2 class="text-md">Terrain Height</h2>
            <hr/>
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-min-height">Min. Height (m)</label>
            <input type="number" id="map-maker-min-height" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-max-height">Max. Height (m)</label>
            <input type="number" id="map-maker-max-height" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-height-scale">Height Scale (m)</label>
            <input type="number" id="map-maker-height-scale" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <!-- * Noise Parameters * -->
        <div>
            <h2 class="text-md">Noise</h2>
            <hr/>
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" class="text-xs" for="map-maker-initial-amplitude">Amplitude</label>
            <input type="number" id="map-maker-initial-amplitude" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-amplitude-persistence">Amp. Persistence</label>
            <input type="number" id="map-maker-amplitude-persistence" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-initial-frequency">Frequency</label>
            <input type="number" id="map-maker-initial-frequency" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-frequency-persistence">Freq. Persistence</label>
            <input type="number" id="map-maker-frequency-persistence" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-carve-amplitude">Carve Amplitude</label>
            <input type="number" id="map-maker-carve-amplitude" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-carve-frequency">Carve Frequency</label>
            <input type="number" id="map-maker-carve-frequency" class="text-xs map-maker-number-input" step="0.1" />
        </div>

        <div class="map-maker-number-container">
            <label class="text-xs" for="map-maker-noise-octaves">Noise Octaves</label>
            <input type="number" id="map-maker-noise-octaves" class="text-xs map-maker-number-input" step="1" />
        </div>

        <!-- * Texture Parameters * -->
        <div>
            <h2 class="text-md">Texture Layers</h2>
            <hr/>
        </div>

        <div class="map-maker-texture-layers">
            <div id="map-maker-texture-layers-container" />
            <button id="map-maker-add-texture-layer-button">
                +
            </button>
        </div>
    </div>

    <!-- * Map 3D Renderer * -->
    <map-maker-canvas>
        <button
            id="map-maker-home-button"
            class="map-maker-overlay-button map-maker-overlay-tl"
        >
            <Image
                src={home_icon}
                alt="Home-Orientation-Icon"
                loading="eager"
            />
        </button>

        <div class="map-maker-overlay-br">
            <button
                id="map-maker-wireframe-button"
                class="map-maker-overlay-button"
            >
                <Image
                    src={wireframe_icon}
                    alt="Wireframe-Icon"
                    loading="eager"
                />
            </button>

            <button
                id="map-maker-download-button"
                class="map-maker-overlay-button"
            >
                <Image
                    src={download_icon}
                    alt="Download-Icon"
                    loading="eager"
                />
            </button>
        </div>
    </map-maker-canvas>
</NavLayout>

<style is:global>
    .map-maker-body {
        display: flex;
        flex-direction: row;
    }

    .map-maker-config-panel {
        width: 28rem;
        height: 100vh;

        padding: 2rem;

        overflow-y: auto;

        background-color: #282828;
        border-right: 0.125rem solid #5e5e5e;

        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .map-maker-number-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .map-maker-number-input {
        width: 100%;
        max-width: 8rem;

        padding: 0.125rem 0.5rem 0.125rem 0.5rem;

        background-color: #1f1f1f;
        color: #ffffff;

        border: 0.125rem solid #615fff;
        border-radius: 0.5rem;
    }

    map-maker-canvas {
        width: calc(100vw - 28rem);
        height: 100vh;

        display: block;
        position: relative;
    }

    .map-maker-overlay-tl {
        position: absolute;
        top: 2rem;
        left: 2rem;
    }

    .map-maker-overlay-br {
        position: absolute;
        bottom: 2rem;
        left: 2rem;

        display: flex;
        gap: 0.5rem;
    }

    .map-maker-overlay-button {
        width: 3rem;
        height: 3rem;

        display: flex;
        justify-content: center;
        align-items: center;

        background-color: #000000;
        border: 0.125rem solid #615fff;
        border-radius: 0.5rem;

        cursor: pointer;
    }

    .map-maker-overlay-button:hover {
        background-color: #372aac;
    }

    .map-maker-overlay-button > img {
        width: 1.5rem;
        height: 1.5rem;
    }

    .map-maker-texture-layers {
        display: flex;
        flex-direction: column;
    }

    #map-maker-add-texture-layer-button {
        color: #ffffff;
        background-color: #1f1f1f;
        border: 0.125rem solid #615fff;
        border-radius: 0.5rem;

        cursor: pointer;
        padding: 0.5rem;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
        transition: background-color 150ms ease-in-out 0s;
    }

    #map-maker-add-texture-layer-button:hover {
        background-color: #615fff;
    }

    .map-maker-texture-layer-card {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;

        background-color: #3f3f3f;
        border: 0.125rem solid #615fff;
        border-radius: 0.5rem;

        padding: 0.5rem;
    }

    #map-maker-texture-layers-container {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .map-maker-texture-layer-remove-button {
        width: 1.5rem;
        height: 1.5rem;

        padding: 0.125rem;

        display: flex;
        justify-content: center;
        align-items: center;

        border: none;
        background-color: #460809;
        cursor: pointer;

        border-radius: 0.25rem;
        transition: background-color 150ms ease-in-out 0s;
    }

    .map-maker-texture-layer-remove-button:hover {
        background-color: #e7000b;
    }

    .map-maker-texture-layer-remove-button > img {
        width: 0.875rem;
        height: 0.875rem;
    }

    @media only screen and (max-width: 56rem) {
        .map-maker-body {
            flex-direction: column-reverse;
        }

        .map-maker-config-panel {
            width: 100vw;
            height: 28rem;
            max-height: 50vh;

            border-top: 0.125rem solid #5e5e5e;
            border-right: none;
        }

        map-maker-canvas {
            width: 100vw;
            height: calc(100vh - 28rem);
            min-height: 50vh;
        }
    }
</style>

<script>
    import * as THREE from "three";
    import { OrbitControls } from "three/examples/jsm/Addons.js";
    import RenderCanvas from "../../../../components/threejs/RenderCanvas";
    import TerrainGenerator, { type TerrainTexture } from "../../../../components/threejs/TerrainGenerator";

    import placeholder_texture from "../../../../assets/materials/Placeholder.jpg";

    import dirt_color from "../../../../assets/materials/map_maker/Dirt.jpg";
    import sand_color from "../../../../assets/materials/map_maker/Sand.jpg";
    import snow_color from "../../../../assets/materials/map_maker/Snow.jpg";
    import stone_color from "../../../../assets/materials/map_maker/Stone.jpg";
    import water_color from "../../../../assets/materials/map_maker/Water.jpg";

    import trash_icon from "../../../../assets/icons/Trash.svg";

    class MapMakerCanvas extends HTMLElement {
        private canvas: RenderCanvas;
        private terrain_generator: TerrainGenerator;

        private orbit_controls: OrbitControls;

        constructor() {
            super();

            this.canvas = new RenderCanvas({
                camera: {
                    fov: 70.0,
                    near: 0.1,
                    far: 5000.0
                },
                renderer: {
                    antialias: true,
                    clear_color: 0x000000,
                    clear_alpha: 1.0,
                    tone_mapping: THREE.ACESFilmicToneMapping
                }
            });

            this.terrain_generator = new TerrainGenerator({
                width: 100,
                height: 100,
                spacing: 1.0,

                wireframe_enabled: false,
                morph_time: 0.25,

                random_seed: 32702,

                min_height: 4.5,
                max_height: 40.0,
                terrain_scale: 100.0,
                start_amplitude: 1.0,
                start_frequency: 0.06,

                carve_frequency: 0.008,
                carve_amplitude: 0.95,

                octaves: 6,
                persistence: 0.45,
                lacunarity: 2.0,

                texture_layers: [
                    {
                        texture_src: water_color.src,
                        min_height: 0.0,
                        max_height: 5.0,
                        tile_size: 20.0
                    }, {
                        texture_src: sand_color.src,
                        min_height: 5.0,
                        max_height: 7.0,
                        tile_size: 20.0
                    }, {
                        texture_src: dirt_color.src,
                        min_height: 7.0,
                        max_height: 12.0,
                        tile_size: 20.0
                    }, {
                        texture_src: stone_color.src,
                        min_height: 12.0,
                        max_height: 20.0,
                        tile_size: 20.0
                    }, {
                        texture_src: snow_color.src,
                        min_height: 20.0,
                        max_height: 40.0,
                        tile_size: 20.0
                    },
                ],
            });

            this.canvas.registerUpdateCallback(this.onUpdate.bind(this));
            this.canvas.setCameraPosition(75.0, 75.0, 75.0);
            this.canvas.add(this.terrain_generator);
            this.canvas.setParent(this);

            this.orbit_controls = new OrbitControls(this.canvas.getCamera(), this.canvas.getDomElement());
            this.orbit_controls.saveState();

            // ? View Buttons

            const home_button: HTMLElement | null = document.getElementById("map-maker-home-button");
            home_button!.addEventListener("click", this.onHomeButton.bind(this));
            const wireframe_button: HTMLElement | null = document.getElementById("map-maker-wireframe-button");
            wireframe_button!.addEventListener("click", this.onWireframeButton.bind(this));
            const download_button: HTMLElement | null = document.getElementById("map-maker-download-button");
            download_button!.addEventListener("click", this.onDownloadButton.bind(this));

            // ? Grid Inputs

            const grid_width_input: HTMLInputElement | null = document.getElementById("map-maker-grid-width") as HTMLInputElement;
            grid_width_input!.value = this.terrain_generator.getWidth().toString();

            const grid_height_input: HTMLInputElement | null = document.getElementById("map-maker-grid-height") as HTMLInputElement;
            grid_height_input!.value = this.terrain_generator.getHeight().toString();

            const point_spacing_input: HTMLInputElement | null = document.getElementById("map-maker-point-spacing") as HTMLInputElement;
            point_spacing_input!.value = this.terrain_generator.getSpacing().toString();

            const onGridChange = () => {
                this.onGridInputChange(
                    grid_width_input as HTMLInputElement,
                    grid_height_input as HTMLInputElement,
                    point_spacing_input as HTMLInputElement
                );
            };

            grid_width_input.addEventListener("change", onGridChange);
            grid_height_input.addEventListener("change", onGridChange);
            point_spacing_input.addEventListener("change", onGridChange);

            // ? Noise Inputs

            const min_height_input: HTMLInputElement | null = document.getElementById("map-maker-min-height") as HTMLInputElement;
            min_height_input!.value = this.terrain_generator.getMinHeight().toString();

            const max_height_input: HTMLInputElement | null = document.getElementById("map-maker-max-height") as HTMLInputElement;
            max_height_input!.value = this.terrain_generator.getMaxHeight().toString();

            const height_scale_input: HTMLInputElement | null = document.getElementById("map-maker-height-scale") as HTMLInputElement;
            height_scale_input!.value = this.terrain_generator.getTerrainScale().toString();

            const initial_amplitude_input: HTMLInputElement | null = document.getElementById("map-maker-initial-amplitude") as HTMLInputElement;
            initial_amplitude_input!.value = this.terrain_generator.getStartAmplitude().toString();

            const amplitude_persistence_input: HTMLInputElement | null = document.getElementById("map-maker-amplitude-persistence") as HTMLInputElement;
            amplitude_persistence_input!.value = this.terrain_generator.getPersistence().toString();

            const initial_frequency_input: HTMLInputElement | null = document.getElementById("map-maker-initial-frequency") as HTMLInputElement;
            initial_frequency_input!.value = this.terrain_generator.getStartFrequency().toString();

            const frequency_persistence_input: HTMLInputElement | null = document.getElementById("map-maker-frequency-persistence") as HTMLInputElement;
            frequency_persistence_input!.value = this.terrain_generator.getLacunarity().toString();

            const carve_amplitude_input: HTMLInputElement | null = document.getElementById("map-maker-carve-amplitude") as HTMLInputElement;
            carve_amplitude_input!.value = this.terrain_generator.getCarveAmplitude().toString();

            const carve_frequency_input: HTMLInputElement | null = document.getElementById("map-maker-carve-frequency") as HTMLInputElement;
            carve_frequency_input!.value = this.terrain_generator.getCarveFrequency().toString();

            const noise_octaves_input: HTMLInputElement | null = document.getElementById("map-maker-noise-octaves") as HTMLInputElement;
            noise_octaves_input!.value = this.terrain_generator.getOctaves().toString();

            const onNoiseChange = () => {
                this.onNoiseInputChange(
                    min_height_input as HTMLInputElement,
                    max_height_input as HTMLInputElement,
                    height_scale_input as HTMLInputElement,
                    initial_amplitude_input as HTMLInputElement,
                    amplitude_persistence_input as HTMLInputElement,
                    initial_frequency_input as HTMLInputElement,
                    frequency_persistence_input as HTMLInputElement,
                    carve_amplitude_input as HTMLInputElement,
                    carve_frequency_input as HTMLInputElement,
                    noise_octaves_input as HTMLInputElement
                );
            }

            min_height_input.addEventListener("change", onNoiseChange);
            max_height_input.addEventListener("change", onNoiseChange);
            height_scale_input.addEventListener("change", onNoiseChange);
            initial_amplitude_input.addEventListener("change", onNoiseChange);
            amplitude_persistence_input.addEventListener("change", onNoiseChange);
            initial_frequency_input.addEventListener("change", onNoiseChange);
            frequency_persistence_input.addEventListener("change", onNoiseChange);
            carve_amplitude_input.addEventListener("change", onNoiseChange);
            carve_frequency_input.addEventListener("change", onNoiseChange);
            noise_octaves_input.addEventListener("change", onNoiseChange);

            // ? Texture Layer Editor

            const texture_layers_container: HTMLElement | null = document.getElementById("map-maker-texture-layers-container");
            const add_texture_layer_button: HTMLElement | null = document.getElementById("map-maker-add-texture-layer-button");

            if (
                texture_layers_container === null ||
                add_texture_layer_button === null
            ) {
                throw new Error("Failed to initialize Texture Layer Editor");
            }

            this.terrain_generator.getTextureIds().forEach((id: number) => {
                this.buildTextureCard(id, texture_layers_container);
            });

            add_texture_layer_button.addEventListener("click", () => {
                if (!this.terrain_generator.canAddTextureLayer()) {
                    alert("Maximum number of texture layers reached.");
                    return;
                }

                const id: number = this.terrain_generator.addTextureLayer({
                    texture_src: placeholder_texture.src,
                    min_height: 0.0,
                    max_height: 1.0,
                    tile_size: 1.0
                });

                this.buildTextureCard(id, texture_layers_container);
            });
        }

        private buildTextureCard(id: number, card_container: HTMLElement): void {
            const texture: TerrainTexture | null = this.terrain_generator.getTextureLayer(id);

            if (texture === null) {
                throw new Error(`Failed to retrieve texture layer with ID: ${id}`);
            }

            const card: HTMLDivElement = document.createElement("div");
            card.className = "map-maker-texture-layer-card";

            // ? Build the texture preview

            const texture_div: HTMLDivElement = document.createElement("div");
            const texture_input: HTMLInputElement = document.createElement("input");

            texture_input.style.display = "none";
            texture_input.id = `map-maker-texture-${id}-texture-image`;

            const texture_preview: HTMLLabelElement = document.createElement("label");

            texture_preview.htmlFor = texture_input.id;

            texture_preview.style.width = "7rem";
            texture_preview.style.height = "7rem";
            texture_preview.style.display = "block";
            texture_preview.style.cursor = "pointer";
            texture_preview.style.backgroundSize = "cover";
            texture_preview.style.backgroundPosition = "center";
            texture_preview.style.border = "solid 0.125rem #615fff"
            texture_preview.style.boxShadow = "inset 0 0 0.5rem #000000";
            texture_preview.style.backgroundImage = `url(${texture.texture_src})`;

            texture_input.type = "file";
            texture_input.accept = "image/*";
            texture_input.addEventListener("change", () => {
                if (!texture_input.files || texture_input.files.length === 0) {
                    return;
                }

                const file: File = texture_input.files[0];
                const source: string = URL.createObjectURL(file);
                this.terrain_generator.editTextureLayerTexture(id, source);
                texture_preview.style.backgroundImage = `url(${source})`;
            });

            texture_div.appendChild(texture_preview);
            texture_div.appendChild(texture_input);

            // ? Build the tile and height inputs

            const input_div: HTMLDivElement = document.createElement("div");
            input_div.style.display = "flex";
            input_div.style.flexDirection = "column";
            input_div.style.justifyContent = "space-between";
            input_div.style.height = "100%";

            const tile_size_div: HTMLDivElement = document.createElement("div");

            const tile_size_label: HTMLLabelElement = document.createElement("label");
            tile_size_label.className = "text-xs";
            tile_size_label.textContent = "Tile Size (m)";
            tile_size_label.htmlFor = `map-maker-texture-${id}-tile-size`;

            const tile_size_input: HTMLInputElement = document.createElement("input");
            tile_size_input.id = tile_size_label.htmlFor;
            tile_size_input.className = "map-maker-number-input";
            tile_size_input.type = "number";
            tile_size_input.value = texture.tile_size.toString();
            tile_size_input.step = "0.1";

            tile_size_input.addEventListener("change", () => {
                let tile_size: number = parseFloat(tile_size_input.value);

                if (tile_size < 0.1) {
                    tile_size = 0.1;
                    tile_size_input.value = "0.1";
                }

                this.terrain_generator.editTextureLayerTileSize(id, tile_size);
            });

            tile_size_div.appendChild(tile_size_label);
            tile_size_div.appendChild(tile_size_input);

            const min_height_div: HTMLDivElement = document.createElement("div");

            const min_height_label: HTMLLabelElement = document.createElement("label");
            min_height_label.className = "text-xs";
            min_height_label.textContent = "Min. Height (m)";
            min_height_label.htmlFor = `map-maker-texture-${id}-min-height`;

            const min_height_input: HTMLInputElement = document.createElement("input");
            min_height_input.id = min_height_label.htmlFor;
            min_height_input.className = "map-maker-number-input";
            min_height_input.type = "number";
            min_height_input.value = texture.min_height.toString();
            min_height_input.step = "0.1";

            min_height_div.appendChild(min_height_label);
            min_height_div.appendChild(min_height_input);

            min_height_input.addEventListener("change", () => {
                let min_height: number = parseFloat(min_height_input.value);
                let max_height: number = parseFloat(max_height_input.value);

                if (min_height < 0.0) {
                    min_height = 0.0;
                    min_height_input.value = "0";
                }

                if (max_height < min_height) {
                    max_height = min_height;
                    max_height_input.value = min_height.toString();
                }

                this.terrain_generator.editTextureLayerHeightRange(id, min_height, max_height);
            });

            const max_height_div: HTMLDivElement = document.createElement("div");

            const max_height_label: HTMLLabelElement = document.createElement("label");
            max_height_label.className = "text-xs";
            max_height_label.textContent = "Max. Height (m)";
            max_height_label.htmlFor = `map-maker-texture-${id}-max-height`;

            const max_height_input: HTMLInputElement = document.createElement("input");
            max_height_input.id = max_height_label.htmlFor;
            max_height_input.className = "map-maker-number-input";
            max_height_input.type = "number";
            max_height_input.value = texture.max_height.toString();
            max_height_input.step = "0.1";

            max_height_div.appendChild(max_height_label);
            max_height_div.appendChild(max_height_input);

            max_height_input.addEventListener("change", () => {
                const min_height: number = parseFloat(min_height_input.value);
                let max_height: number = parseFloat(max_height_input.value);

                if (max_height < min_height) {
                    max_height = min_height;
                    max_height_input.value = min_height.toString();
                }

                this.terrain_generator.editTextureLayerHeightRange(id, min_height, max_height);
            });

            input_div.appendChild(tile_size_div);
            input_div.appendChild(min_height_div);
            input_div.appendChild(max_height_div);

            // ? Build the remove button

            const remove_div: HTMLDivElement = document.createElement("div");
            remove_div.style.height = "100%";

            const remove_button: HTMLButtonElement = document.createElement("button");
            remove_button.className = "map-maker-texture-layer-remove-button";

            remove_button.addEventListener("click", () => {
                this.terrain_generator.removeTextureLayer(id);
                card_container.removeChild(card);
            });

            const trash_image: HTMLImageElement = document.createElement("img");
            trash_image.src = trash_icon.src;
            trash_image.alt = `map-maker-texture-layer-remove-button-${id}`;
            trash_image.loading = "lazy";

            remove_button.appendChild(trash_image);
            remove_div.appendChild(remove_button);

            // ? Asseble the card

            card.appendChild(texture_div);
            card.appendChild(input_div);
            card.appendChild(remove_div);
            card_container.appendChild(card);
        }

        private onUpdate(delta_time: number): void {
            this.orbit_controls.update(delta_time);
            this.terrain_generator.onUpdate(delta_time);
        }

        private onHomeButton(): void {
            this.orbit_controls.reset();
        }

        private onWireframeButton(): void {
            this.terrain_generator.toggleWireframeMode();
        }

        private onDownloadButton(): void {
            this.terrain_generator.downloadOBJ();
        }

        private onGridInputChange(
            width_input: HTMLInputElement,
            height_input: HTMLInputElement,
            spacing_input: HTMLInputElement
        ): void {
            let width: number = parseInt(width_input.value);
            let height: number = parseInt(height_input.value);
            let spacing: number = parseFloat(spacing_input.value);

            if (width < 2) {
                width_input.value = "2";
                width = 2;
            }

            if (height < 2) {
                height_input.value = "2";
                height = 2;
            }

            if (spacing <= 0.1) {
                spacing_input.value = "0.1";
                spacing = 0.1;
            }

            if (width === this.terrain_generator.getWidth() &&
                height === this.terrain_generator.getHeight() &&
                spacing === this.terrain_generator.getSpacing()) {
                return;
            }

            this.terrain_generator.regenerateTerrainGeometry(
                width,
                height,
                spacing
            );
        }

        private onNoiseInputChange(
            min_height_input: HTMLInputElement,
            max_height_input: HTMLInputElement,
            height_scale_input: HTMLInputElement,
            initial_amplitude_input: HTMLInputElement,
            amplitude_persistence_input: HTMLInputElement,
            initial_frequency_input: HTMLInputElement,
            frequency_persistence_input: HTMLInputElement,
            carve_amplitude_input: HTMLInputElement,
            carve_frequency_input: HTMLInputElement,
            noise_octaves_input: HTMLInputElement
        ): void {
            let min_height: number = parseFloat(min_height_input.value);
            let max_height: number = parseFloat(max_height_input.value);
            let height_scale: number = parseFloat(height_scale_input.value);
            let initial_amplitude: number = parseFloat(initial_amplitude_input.value);
            let amplitude_persistence: number = parseFloat(amplitude_persistence_input.value);
            let initial_frequency: number = parseFloat(initial_frequency_input.value);
            let frequency_persistence: number = parseFloat(frequency_persistence_input.value);
            let carve_amplitude: number = parseFloat(carve_amplitude_input.value);
            let carve_frequency: number = parseFloat(carve_frequency_input.value);
            let noise_octaves: number = parseInt(noise_octaves_input.value);

            if (min_height < 0.0) {
                min_height_input.value = "0.0";
                min_height = 0.0;
            }

            if (max_height <= min_height) {
                max_height_input.value = min_height.toString();
                max_height = min_height;
            }

            if (height_scale <= 0.0) {
                height_scale_input.value = "0.0";
                height_scale = 0.0;
            }

            if (initial_amplitude <= 0.0) {
                initial_amplitude_input.value = "0.0";
                initial_amplitude = 0.0;
            }

            if (amplitude_persistence < 0.0) {
                amplitude_persistence_input.value = "0.0";
                amplitude_persistence = 0.0;
            }

            if (initial_frequency <= 0.0) {
                initial_frequency_input.value = "0.0";
                initial_frequency = 0.0;
            }

            if (frequency_persistence < 0.0) {
                frequency_persistence_input.value = "0.0";
                frequency_persistence = 0.0;
            }

            if (carve_amplitude < 0.0) {
                carve_amplitude_input.value = "0.0";
                carve_amplitude = 0.0;
            }

            if (carve_frequency <= 0.0) {
                carve_frequency_input.value = "0.0";
                carve_frequency = 0.0;
            }

            if (noise_octaves < 1) {
                noise_octaves_input.value = "1";
                noise_octaves = 1;
            }

            if (min_height === this.terrain_generator.getMinHeight() &&
                max_height === this.terrain_generator.getMaxHeight() &&
                height_scale === this.terrain_generator.getTerrainScale() &&
                initial_amplitude === this.terrain_generator.getStartAmplitude() &&
                amplitude_persistence === this.terrain_generator.getPersistence() &&
                initial_frequency === this.terrain_generator.getStartFrequency() &&
                frequency_persistence === this.terrain_generator.getLacunarity() &&
                carve_amplitude === this.terrain_generator.getCarveAmplitude() &&
                carve_frequency === this.terrain_generator.getCarveFrequency() &&
                noise_octaves === this.terrain_generator.getOctaves()) {
                return;
            }

            this.terrain_generator.regenerateTerrainNoise(
                min_height,
                max_height,
                height_scale,
                initial_amplitude,
                initial_frequency,
                carve_frequency,
                carve_amplitude,
                noise_octaves,
                amplitude_persistence,
                frequency_persistence
            );
        }
    }

    customElements.define("map-maker-canvas", MapMakerCanvas);
</script>